 rustc main.rs
./main
----cargo
-build your project with
cargo build
-run your project with
cargo run
-test your project with
cargo test
-build documentation for your project with
cargo doc
-publish a library to crates.io with
cargo publish
-generate  new project
cargo new hello-rust

----ch5 using structure
-`Rectangle` cannot be formatted using `:?`; if it is defined in your
 crate, add `#[derive(Debug)]` or manually implement it
----ch7 packages,creates and modules
-use a keyword to bring a path into scope
-pub, a keyword to make items public
-Renaming items when bringing them into scope with the as keyword
?
<pre>
use std::num::ParseIntError;

fn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {
    let first_number = first_number_str.parse::<i32>()?;
    let second_number = second_number_str.parse::<i32>()?;

    Ok(first_number * second_number)
}

fn print(result: Result<i32, ParseIntError>) {
    match result {
        Ok(n)  => println!("n is {}", n),
        Err(e) => println!("Error: {}", e),
    }
}

fn main() {
    print(multiply("10", "2"));
    print(multiply("t", "2"));
}
</pre>
use std::cmp::Ordering;
use std::io;
//same
use std::{cmp::Ordering, io};
//
use std::io;
use std::io::Write;
//same

use std::io::{self, Write};
-all public
use std::collections::*;
---chapter 9 error handling
-Rust doesn’t have exceptions. Instead, it has the type Result<T, E> for recoverable errors
and the panic! macro that stops execution when the program encounters an unrecoverable error.
-. When the panic! macro executes, your program will print a failure message,
unwind and clean up the stack, and then quit
**The ? Operator Can Only Be Used in Functions That Return Result

--9.3 To panic! or not to panic!
-When code panics, there’s no way to recover
-In rare situations, it’s more appropriate to write code that panics instead of returning a Result.
--12.6 Writing Error messages to standard error instead of standard output.
-The way to demonstrate this behavior is by running the program with > and the filename,
output.txt, that we want to redirect the standard output stream to.
cargo run to poem.txt > output.txt
--12.7
-to show error on screen,we use eprintln! instead of println!
cargo run > output.txt
--13.1
-The Fn traits are provided by the standard library.
All closures implement at least one of the traits: Fn, FnMut, or FnOnce
-If you want to force the closure to take ownership of the values it uses in the environment,
you can use the move keyword before the parameter list.
This technique is mostly useful when passing a closure to a new thread to move the data
so it’s owned by the new thread
-All iterators implement a trait named Iterator
pub trait Iterator {
    type Item;

    fn next(&mut self) -> Option<Self::Item>;

    // methods with default implementations elided
}
--15.1 using box
You’ll use them most often in these situations:
*When you have a type whose size can’t be known at compile time and you want to use a value of that type in a context that requires an exact size
*When you have a large amount of data and you want to transfer ownership but ensure the data won’t be copied when you do so
*When you want to own a value and you care only that it’s a type that implements a particular trait rather than being of a specific type

-15.4
  Box , Rc veya RefCell 'ı seçmek için nedenlerin özeti:
*Rc<T> enables multiple owners of the same data; Box<T> and RefCell<T> have single owners.
*Box<T> allows immutable or mutable borrows checked at compile time; Rc<T> allows only immutable borrows checked at compile time; RefCell<T> allows immutable or mutable borrows checked at runtime.
*Because RefCell<T> allows mutable borrows checked at runtime, you can mutate the value inside the RefCell<T> even when the RefCell<T> is immutable.


